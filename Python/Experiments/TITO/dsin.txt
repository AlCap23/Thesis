#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
     100                   # StopTime     Time at which integration stops
 5.0000000000000003E-002   # Increment    Communication step size, if > 0
       0                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-002   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
      29                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(137,31)
KPY[1, 1]
KPY[1, 2]
KPY[2, 1]
KPY[2, 2]
tITO_FOTD.K[1, 1]
tITO_FOTD.K[1, 2]
tITO_FOTD.K[2, 1]
tITO_FOTD.K[2, 2]
tITO_FOTD.T[1, 1]
tITO_FOTD.T[1, 2]
tITO_FOTD.T[2, 1]
tITO_FOTD.T[2, 2]
tITO_FOTD.L[1, 1]
tITO_FOTD.L[1, 2]
tITO_FOTD.L[2, 1]
tITO_FOTD.L[2, 2]
tITO_FOTD.firstOrder.k
tITO_FOTD.firstOrder.T
tITO_FOTD.firstOrder.initType
tITO_FOTD.firstOrder.y_start
tITO_FOTD.firstOrder.y
tITO_FOTD.firstOrder.der(y)
tITO_FOTD.fixedDelay.y
tITO_FOTD.fixedDelay.delayTime
tITO_FOTD.u_1
tITO_FOTD.y_1
tITO_FOTD.y_2
tITO_FOTD.add.u2
tITO_FOTD.add.k1
tITO_FOTD.add.k2
tITO_FOTD.add1.u1
tITO_FOTD.add1.u2
tITO_FOTD.add1.k1
tITO_FOTD.add1.k2
tITO_FOTD.firstOrder1.k
tITO_FOTD.firstOrder1.T
tITO_FOTD.firstOrder1.initType
tITO_FOTD.firstOrder1.y_start
tITO_FOTD.firstOrder1.y
tITO_FOTD.firstOrder1.der(y)
tITO_FOTD.fixedDelay1.delayTime
tITO_FOTD.firstOrder2.k
tITO_FOTD.firstOrder2.T
tITO_FOTD.firstOrder2.initType
tITO_FOTD.firstOrder2.y_start
tITO_FOTD.firstOrder2.y
tITO_FOTD.firstOrder2.der(y)
tITO_FOTD.fixedDelay2.delayTime
tITO_FOTD.firstOrder3.k
tITO_FOTD.firstOrder3.T
tITO_FOTD.firstOrder3.initType
tITO_FOTD.firstOrder3.y_start
tITO_FOTD.firstOrder3.y
tITO_FOTD.firstOrder3.der(y)
tITO_FOTD.fixedDelay3.delayTime
step.height
step.y
step.offset
step.startTime
const.k
pIController.y
pIController.u
pIController.invertFeedback
pIController.offset
pIController.k
pIController.Ti
pIController.ki
pIController.use_kInput
pIController.use_TiInput
pIController.use_kiInput
pIController.yMax
pIController.yMin
pIController.yInitial
pIController.use_activeInput
pIController.use_y_notActive
pIController.activationTime
pIController.getActive.u
pIController.y_unlim
pIController.y_old
pIController.u_antiWindUp
pIController.integral
pIController.der(integral)
pIController.k_in_.k
pIController.ki_in_.k
pIController.Ti_in_.k
pIController1.y
pIController1.u
pIController1.invertFeedback
pIController1.offset
pIController1.k
pIController1.Ti
pIController1.ki
pIController1.use_kInput
pIController1.use_TiInput
pIController1.use_kiInput
pIController1.yMax
pIController1.yMin
pIController1.yInitial
pIController1.use_activeInput
pIController1.use_y_notActive
pIController1.activationTime
pIController1.getActive.u
pIController1.y_unlim
pIController1.y_old
pIController1.u_antiWindUp
pIController1.integral
pIController1.der(integral)
pIController1.k_in_.k
pIController1.ki_in_.k
pIController1.Ti_in_.k
pIController2.y
pIController2.u
pIController2.invertFeedback
pIController2.offset
pIController2.k
pIController2.Ti
pIController2.ki
pIController2.use_kInput
pIController2.use_TiInput
pIController2.use_kiInput
pIController2.yMax
pIController2.yMin
pIController2.yInitial
pIController2.use_activeInput
pIController2.use_y_notActive
pIController2.activationTime
pIController2.getActive.u
pIController2.y_unlim
pIController2.y_old
pIController2.u_antiWindUp
pIController2.integral
pIController2.der(integral)
pIController2.k_in_.k
pIController2.ki_in_.k
pIController2.Ti_in_.k
add.k1
add.k2

double initialValue(137,6)
 -1       0                       0                       0                
  1   280   # KPY[1, 1]
 -1       0                       0                       0                
  1   280   # KPY[1, 2]
 -1       0                       0                       0                
  1   280   # KPY[2, 1]
 -1       0                       0                       0                
  1   280   # KPY[2, 2]
 -1      10                       0                       0                
  1   280   # tITO_FOTD.K[1, 1]
 -1       1                       0                       0                
  1   280   # tITO_FOTD.K[1, 2]
 -1 1.0000000000000001E-001       0                       0                
  1   280   # tITO_FOTD.K[2, 1]
 -1       5                       0                       0                
  1   280   # tITO_FOTD.K[2, 2]
 -1      10                       0                       0                
  1   280   # tITO_FOTD.T[1, 1]
 -1       5                       0                       0                
  1   280   # tITO_FOTD.T[1, 2]
 -1 1.0000000000000000E-002       0                       0                
  1   280   # tITO_FOTD.T[2, 1]
 -1      11                       0                       0                
  1   280   # tITO_FOTD.T[2, 2]
 -1 1.0000000000000000E-003       0                       0                
  1   280   # tITO_FOTD.L[1, 1]
 -1 1.0000000000000000E-002       0                       0                
  1   280   # tITO_FOTD.L[1, 2]
 -1 1.0000000000000001E-001       0                       0                
  1   280   # tITO_FOTD.L[2, 1]
 -1 1.0000000000000000E-002       0                       0                
  1   280   # tITO_FOTD.L[2, 2]
  0       0                       0                       0                
  6   256   # tITO_FOTD.firstOrder.k
  0       1                       0                       0                
  6   256   # tITO_FOTD.firstOrder.T
  0       3                       1                       4                
  6   258   # tITO_FOTD.firstOrder.initType
 -1       0                       0                       0                
  1   280   # tITO_FOTD.firstOrder.y_start
 -1       0                       0                       0                
  2   272   # tITO_FOTD.firstOrder.y
  0       0                       0                       0                
  3   256   # tITO_FOTD.firstOrder.der(y)
  0       0                       0                       0                
  6   256   # tITO_FOTD.fixedDelay.y
  0       1                       0                       0                
  6   256   # tITO_FOTD.fixedDelay.delayTime
  0       0                       0                       0                
  6   256   # tITO_FOTD.u_1
  0       0                       0                       0                
  6   256   # tITO_FOTD.y_1
  0       0                       0                       0                
  6   256   # tITO_FOTD.y_2
  0       0                       0                       0                
  6   256   # tITO_FOTD.add.u2
 -1       1                       0                       0                
  1   280   # tITO_FOTD.add.k1
 -1       1                       0                       0                
  1   280   # tITO_FOTD.add.k2
  0       0                       0                       0                
  6   256   # tITO_FOTD.add1.u1
  0       0                       0                       0                
  6   256   # tITO_FOTD.add1.u2
 -1       1                       0                       0                
  1   280   # tITO_FOTD.add1.k1
 -1       1                       0                       0                
  1   280   # tITO_FOTD.add1.k2
  0       0                       0                       0                
  6   256   # tITO_FOTD.firstOrder1.k
  0       1                       0                       0                
  6   256   # tITO_FOTD.firstOrder1.T
  0       3                       1                       4                
  6   258   # tITO_FOTD.firstOrder1.initType
 -1       0                       0                       0                
  1   280   # tITO_FOTD.firstOrder1.y_start
 -1       0                       0                       0                
  2   272   # tITO_FOTD.firstOrder1.y
  0       0                       0                       0                
  3   256   # tITO_FOTD.firstOrder1.der(y)
  0       1                       0                       0                
  6   256   # tITO_FOTD.fixedDelay1.delayTime
  0       0                       0                       0                
  6   256   # tITO_FOTD.firstOrder2.k
  0       1                       0                       0                
  6   256   # tITO_FOTD.firstOrder2.T
  0       3                       1                       4                
  6   258   # tITO_FOTD.firstOrder2.initType
 -1       0                       0                       0                
  1   280   # tITO_FOTD.firstOrder2.y_start
 -1       0                       0                       0                
  2   272   # tITO_FOTD.firstOrder2.y
  0       0                       0                       0                
  3   256   # tITO_FOTD.firstOrder2.der(y)
  0       1                       0                       0                
  6   256   # tITO_FOTD.fixedDelay2.delayTime
  0       0                       0                       0                
  6   256   # tITO_FOTD.firstOrder3.k
  0       1                       0                       0                
  6   256   # tITO_FOTD.firstOrder3.T
  0       3                       1                       4                
  6   258   # tITO_FOTD.firstOrder3.initType
 -1       0                       0                       0                
  1   280   # tITO_FOTD.firstOrder3.y_start
 -1       0                       0                       0                
  2   272   # tITO_FOTD.firstOrder3.y
  0       0                       0                       0                
  3   256   # tITO_FOTD.firstOrder3.der(y)
  0       1                       0                       0                
  6   256   # tITO_FOTD.fixedDelay3.delayTime
 -1      10                       0                       0                
  1   280   # step.height
  0       0                       0                       0                
  6   320   # step.y
 -1       0                       0                       0                
  1   280   # step.offset
 -1       5                       0                       0                
  1   280   # step.startTime
 -1       0                       0                       0                
  1   280   # const.k
  0       0                       0                       0                
  6   256   # pIController.y
  0       0                       0                       0                
  6   256   # pIController.u
  0       0                       0                       0                
  6   257   # pIController.invertFeedback
 -1       0                       0                       0                
  1   280   # pIController.offset
 -1 3.3999999999999999E+000       0                       0                
  1   280   # pIController.k
 -1 5.0000000000000000E-001 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # pIController.Ti
 -1 2.7999999999999998E+000 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # pIController.ki
  0       0                       0                       0                
  6   257   # pIController.use_kInput
  0       0                       0                       0                
  6   257   # pIController.use_TiInput
  0       0                       0                       0                
  6   257   # pIController.use_kiInput
 -1       1                       0                       0                
  1   280   # pIController.yMax
  0       0                       0                       0                
  6   256   # pIController.yMin
 -1       0                       0                       0                
  1   280   # pIController.yInitial
  0       0                       0                       0                
  6   257   # pIController.use_activeInput
  0       0                       0                       0                
  6   257   # pIController.use_y_notActive
 -1       0                       0                       0                
  1   280   # pIController.activationTime
  0       0                       0                       0                
  6  1345   # pIController.getActive.u
  0       0                       0                       0                
  6  1280   # pIController.y_unlim
  0       0                       0                       0                
  6  1344   # pIController.y_old
  0       0                       0                       0                
  6  1280   # pIController.u_antiWindUp
 -1       0                       0                       0                
  2  1296   # pIController.integral
  0       0                       0                       0                
  3  1280   # pIController.der(integral)
  0       1                       0                       0                
  6  1280   # pIController.k_in_.k
  0       1                       0                       0                
  6  1280   # pIController.ki_in_.k
  0       1                       0                       0                
  6  1280   # pIController.Ti_in_.k
  0       0                       0                       0                
  6   256   # pIController1.y
  0       0                       0                       0                
  6   256   # pIController1.u
  0       0                       0                       0                
  6   257   # pIController1.invertFeedback
 -1       0                       0                       0                
  1   280   # pIController1.offset
 -1 8.1999999999999993E+000       0                       0                
  1   280   # pIController1.k
 -1 5.0000000000000000E-001 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # pIController1.Ti
 -1 6.7000000000000002E+000 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # pIController1.ki
  0       0                       0                       0                
  6   257   # pIController1.use_kInput
  0       0                       0                       0                
  6   257   # pIController1.use_TiInput
  0       0                       0                       0                
  6   257   # pIController1.use_kiInput
 -1       1                       0                       0                
  1   280   # pIController1.yMax
  0       0                       0                       0                
  6   256   # pIController1.yMin
 -1       0                       0                       0                
  1   280   # pIController1.yInitial
  0       0                       0                       0                
  6   257   # pIController1.use_activeInput
  0       0                       0                       0                
  6   257   # pIController1.use_y_notActive
 -1       0                       0                       0                
  1   280   # pIController1.activationTime
  0       0                       0                       0                
  6  1345   # pIController1.getActive.u
  0       0                       0                       0                
  6  1280   # pIController1.y_unlim
  0       0                       0                       0                
  6  1344   # pIController1.y_old
  0       0                       0                       0                
  6  1280   # pIController1.u_antiWindUp
 -1       0                       0                       0                
  2  1296   # pIController1.integral
  0       0                       0                       0                
  3  1280   # pIController1.der(integral)
  0       1                       0                       0                
  6  1280   # pIController1.k_in_.k
  0       1                       0                       0                
  6  1280   # pIController1.ki_in_.k
  0       1                       0                       0                
  6  1280   # pIController1.Ti_in_.k
  0       0                       0                       0                
  6   256   # pIController2.y
  0       0                       0                       0                
  6   256   # pIController2.u
  0       0                       0                       0                
  6   257   # pIController2.invertFeedback
 -1       0                       0                       0                
  1   280   # pIController2.offset
 -1 -8.0000000000000004E-001       0                       0                
  1   280   # pIController2.k
 -1 5.0000000000000000E-001 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # pIController2.Ti
 -1 -6.7000000000000004E-001       0                       0                
  1   280   # pIController2.ki
  0       0                       0                       0                
  6   257   # pIController2.use_kInput
  0       0                       0                       0                
  6   257   # pIController2.use_TiInput
  0       0                       0                       0                
  6   257   # pIController2.use_kiInput
 -1       1                       0                       0                
  1   280   # pIController2.yMax
  0       0                       0                       0                
  6   256   # pIController2.yMin
 -1       0                       0                       0                
  1   280   # pIController2.yInitial
  0       0                       0                       0                
  6   257   # pIController2.use_activeInput
  0       0                       0                       0                
  6   257   # pIController2.use_y_notActive
 -1       0                       0                       0                
  1   280   # pIController2.activationTime
  0       0                       0                       0                
  6  1345   # pIController2.getActive.u
  0       0                       0                       0                
  6  1280   # pIController2.y_unlim
  0       0                       0                       0                
  6  1344   # pIController2.y_old
  0       0                       0                       0                
  6  1280   # pIController2.u_antiWindUp
 -1       0                       0                       0                
  2  1296   # pIController2.integral
  0       0                       0                       0                
  3  1280   # pIController2.der(integral)
  0       1                       0                       0                
  6  1280   # pIController2.k_in_.k
  0       1                       0                       0                
  6  1280   # pIController2.ki_in_.k
  0       1                       0                       0                
  6  1280   # pIController2.Ti_in_.k
 -1       1                       0                       0                
  1   280   # add.k1
 -1       1                       0                       0                
  1   280   # add.k2


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(137,129)
















Gain [1]
Time Constant [s]
Type of initialization (1: no init, 2: steady state, 3/4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
Connector of Real output signal
Delay time of output with respect to input signal [s]



Connector of Real input signal 2
Gain of upper input
Gain of lower input
Connector of Real input signal 1
Connector of Real input signal 2
Gain of upper input
Gain of lower input
Gain [1]
Time Constant [s]
Type of initialization (1: no init, 2: steady state, 3/4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
Delay time of output with respect to input signal [s]
Gain [1]
Time Constant [s]
Type of initialization (1: no init, 2: steady state, 3/4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
Delay time of output with respect to input signal [s]
Gain [1]
Time Constant [s]
Type of initialization (1: no init, 2: steady state, 3/4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
Delay time of output with respect to input signal [s]
Height of step
Connector of Real output signal
Offset of output signal y
Output y = offset for time < startTime [s]
Constant output value
Connector of actuator output signal
Differenz between setpoint and measurement aka control error
true, if feedback signal is inverted [:#(type=Boolean)]
Operating point, added to proportional output
Proportional gain of controller
Time constant of Integrator block [s]
Integral gain [s-1]
= true, if k defined by input [:#(type=Boolean)]
= true, if Ti defined by input [:#(type=Boolean)]
= true, if ki defined by input [:#(type=Boolean)]
Upper limit of output
Lower limit of output
Initial output of controller
= true, if controller is switched on/off externally [:#(type=Boolean)]
= true, if output of not activated controller is defined externally. Otherwise output is hold at deactivation. [:#(type=Boolean)]
Time when controller is switched on [s]
Connector of Boolean input signal [:#(type=Boolean)]





Constant output value
Constant output value [s-1]
Constant output value [s]
Connector of actuator output signal
Differenz between setpoint and measurement aka control error
true, if feedback signal is inverted [:#(type=Boolean)]
Operating point, added to proportional output
Proportional gain of controller
Time constant of Integrator block [s]
Integral gain [s-1]
= true, if k defined by input [:#(type=Boolean)]
= true, if Ti defined by input [:#(type=Boolean)]
= true, if ki defined by input [:#(type=Boolean)]
Upper limit of output
Lower limit of output
Initial output of controller
= true, if controller is switched on/off externally [:#(type=Boolean)]
= true, if output of not activated controller is defined externally. Otherwise output is hold at deactivation. [:#(type=Boolean)]
Time when controller is switched on [s]
Connector of Boolean input signal [:#(type=Boolean)]





Constant output value
Constant output value [s-1]
Constant output value [s]
Connector of actuator output signal
Differenz between setpoint and measurement aka control error
true, if feedback signal is inverted [:#(type=Boolean)]
Operating point, added to proportional output
Proportional gain of controller
Time constant of Integrator block [s]
Integral gain [s-1]
= true, if k defined by input [:#(type=Boolean)]
= true, if Ti defined by input [:#(type=Boolean)]
= true, if ki defined by input [:#(type=Boolean)]
Upper limit of output
Lower limit of output
Initial output of controller
= true, if controller is switched on/off externally [:#(type=Boolean)]
= true, if output of not activated controller is defined externally. Otherwise output is hold at deactivation. [:#(type=Boolean)]
Time when controller is switched on [s]
Connector of Boolean input signal [:#(type=Boolean)]





Constant output value
Constant output value [s-1]
Constant output value [s]
Gain of upper input
Gain of lower input

